import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.base import StorageKey
import pymysql
import asyncio
from aiogram.types import InputFile
from aiogram import F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from aiogram import Router
from datetime import datetime
import pandas as pd
from io import BytesIO
from sqlalchemy import create_engine
import os
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
load_dotenv()

DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'database': os.getenv('DB_NAME'),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD')
}

API_TOKEN = os.getenv('API_TOKEN')

ADMIN_ID_1=os.getenv('ADMIN_ID_1')
ADMIN_ID_2=os.getenv('ADMIN_ID_2')

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

ph_router = Router()

dp.include_router(ph_router)

logging.basicConfig(level=logging.INFO)

sent_reminders = {}


class CompleteOrderStates(StatesGroup):
    result_photos = State()
    awaiting_revision = State()


class CreateOrderStates(StatesGroup):
    description = State()
    photos = State()
    confirm = State()


class LoginStates(StatesGroup):
    login = State()
    password = State()


class RevisionStates(StatesGroup):
    revision_comment = State()
    revision_photos = State()
    revision_awaiting = State()


class DeclineOrderStates(StatesGroup):
    reason = State()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üåõ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "‚úå –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–æ–º–æ—â–∏ —ç–∫—Å–ø–µ—Ä—Ç–∞–º!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")
async def delete_order_start(message: types.Message):
    connection = pymysql.connect(**DB_CONFIG)
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                           SELECT o.id, o.description
                           FROM orders o
                           WHERE o.expert_id = (SELECT id FROM users_expert WHERE tg_id = %s)
                             AND o.status = '–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è'
                           """, (message.from_user.id,))

            orders = cursor.fetchall()

            if not orders:
                await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã")
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for order in orders:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"#{order[0]} - {order[1][:30]}",
                        callback_data=f"cancel_order_{order[0]}"
                    )
                ])

            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
                reply_markup=keyboard
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
    finally:
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("cancel_order_"))
async def confirm_cancel_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[-1])

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_cancel_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])

    await callback.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É #{order_id}?",
        reply_markup=confirm_keyboard
    )


@dp.callback_query(lambda c: c.data.startswith("confirm_cancel_"))
async def process_cancel_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    connection = pymysql.connect(**DB_CONFIG)
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                           UPDATE orders
                           SET status = '–û—Ç–º–µ–Ω–µ–Ω–æ'
                           WHERE id = %s
                             AND expert_id = (SELECT id FROM users_expert WHERE tg_id = %s)
                           """, (order_id, user_id))

            cursor.execute("""
                           SELECT up.tg_id, om.message_id
                           FROM order_messages om
                                    LEFT JOIN users_ph up ON om.ph_id = up.id
                           WHERE order_id = %s
                           """, (order_id,))

            messages = cursor.fetchall()

            for ph_id, message_id in messages:
                try:
                    await bot.edit_message_text(
                        chat_id=ph_id,
                        message_id=message_id,
                        text=f"üö´ –ó–∞—è–≤–∫–∞ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º",
                        reply_markup=None
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            connection.commit()

            await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏")
    finally:
        connection.close()


@dp.callback_query(lambda c: c.data == "cancel_action")
async def cancel_action(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@dp.message(lambda message: message.text == "üåõ –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
async def login_start(message: types.Message, state: FSMContext):
    await state.set_state(LoginStates.login)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(LoginStates.login)
async def process_login_input(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await state.set_state(LoginStates.password)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")


@dp.message(LoginStates.password)
async def process_password_input(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text

    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()

        cursor.execute(
            "SELECT name, surname FROM users_expert WHERE login = %s AND password = %s",
            (login, password)
        )
        expert = cursor.fetchone()
        if expert:
            keyboard = types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
                    [types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")]
                ],
                resize_keyboard=True
            )
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {expert[0]} {expert[1]}!", reply_markup=keyboard)
            await state.clear()
            return

        cursor.execute(
            "SELECT name FROM users_ph WHERE login = %s AND password = %s",
            (login, password)
        )
        ph = cursor.fetchone()
        if ph:
            await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {ph[0]}!")
            await state.clear()
            return

        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        cursor.close()
        connection.close()
        await state.clear()


@dp.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def create_order_start(message: types.Message, state: FSMContext):
    connection = pymysql.connect(**DB_CONFIG)  # type: ignore
    cursor = connection.cursor()
    cursor.execute(
        "SELECT tg_id, banned FROM users_expert WHERE tg_id = %s",
        (message.from_user.id),  # type: ignore
    )
    ban = cursor.fetchone()[1]  # type: ignore
    print(ban)
    if ban == 0:  # type: ignore
        await state.set_state(CreateOrderStates.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:", reply_markup=types.ReplyKeyboardRemove())
    else:  # type: ignore
        await message.answer("‚ùå –í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´! ‚ùå", reply_markup=types.ReplyKeyboardRemove())


@dp.message(CreateOrderStates.description)
async def process_order_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(CreateOrderStates.photos)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∞–∫—Å–∏–º—É–º 6). –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å:",
                         reply_markup=types.ReplyKeyboardMarkup(
                             keyboard=[[types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")]],
                             resize_keyboard=True
                         ))


@dp.message(CreateOrderStates.photos, F.photo)
async def process_order_photos(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photos = user_data.get('photos', [])

    if len(photos) >= 6:
        await message.answer("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!")
        return

    photos.append(message.photo[-1].file_id)  # type: ignore
    await state.update_data(photos=photos)

    if len(photos) < 6:
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ {len(photos)}/6. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å'")
    else:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...")
        await save_order_data(message, state)


@dp.message(CreateOrderStates.photos, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ")
async def finish_photos(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    if not user_data.get('photos'):
        await message.answer("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return
    await save_order_data(message, state)


async def save_order_data(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    expert_id = await get_expert_id(message.from_user.id)  # type: ignore

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")],
            [types.KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É")]
        ],
        resize_keyboard=True
    )

    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()

        cursor.execute(
            """INSERT INTO orders
                   (expert_id, description, status)
               VALUES (%s, %s, '–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è')""",
            (expert_id, user_data['description'])
        )
        order_id = cursor.lastrowid

        for photo_id in user_data.get('photos', []):
            cursor.execute(
                """INSERT INTO order_photos
                       (order_id, photo_url)
                   VALUES (%s, %s)""",
                (order_id, photo_id)
            )

        connection.commit()

        await send_order_to_ph(order_id, user_data['description'], user_data.get('photos', []))

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
    finally:
        cursor.close()
        connection.close()
        await state.clear()


async def get_expert_id(user_id):
    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()
        cursor.execute(
            "SELECT id FROM users_expert WHERE tg_id = %s",
            (user_id,)
        )
        return cursor.fetchone()[0]  # type: ignore
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è expert_id: {e}")
        return None


async def get_ph_id(user_id):
    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()
        cursor.execute(
            "SELECT id FROM users_ph WHERE tg_id = %s",
            (user_id,)
        )
        result = cursor.fetchone()
        return result[0] if result else None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ph_id: {e}")
        return None


@ph_router.callback_query(lambda c: c.data.startswith("take_order_"))
async def take_order(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])  # type: ignore
    ph_id = await get_ph_id(callback.from_user.id)

    if not ph_id:
        await callback.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å!", show_alert=True)
        return

    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore

        cursor2 = connection.cursor()
        with connection.cursor() as cursor2:
            cursor2.execute("""
                            SELECT COUNT(*)
                            FROM orders
                            WHERE ph_id = %s
                              AND status = '–í —Ä–∞–±–æ—Ç–µ'
                            """, (ph_id,))
            if cursor2.fetchone()[0] > 0:  # type: ignore
                await callback.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ!", show_alert=True)
                return

        cursor3 = connection.cursor()
        cursor3.execute("SELECT status FROM orders WHERE id = %s", (order_id,))
        status = cursor3.fetchone()[0]

        if status == "–û—Ç–º–µ–Ω–µ–Ω–æ":
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º!", show_alert=True)
            return

        cursor = connection.cursor()
        cursor.execute(
            "SELECT status, description, expert_id FROM orders WHERE id = %s",
            (order_id,)
        )
        order_data = cursor.fetchone()
        if not order_data:
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        status, description, expert_id = order_data

        if status != "–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
            return

        cursor.execute(
            """UPDATE orders
               SET status = '–í —Ä–∞–±–æ—Ç–µ',
                   ph_id  = %s
               WHERE id = %s""",
            (ph_id, order_id)
        )

        cursor.execute(
            "SELECT up.tg_id, om.message_id FROM users_ph up LEFT JOIN order_messages om ON om.ph_id = up.id WHERE om.order_id = %s",
            (order_id))
        all_messages = cursor.fetchall()
        print(all_messages)

        cursor.execute(
            "SELECT up.name FROM orders o INNER JOIN users_ph up on up.id = o.ph_id WHERE o.id = %s", (order_id))
        ph_name = cursor.fetchone()[0]

        for target_ph_id, message_id in all_messages:
            try:
                new_text = f"üìÑ –ó–∞—è–≤–∫–∞ #{order_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ —É {ph_name}"

                await bot.edit_message_text(
                    chat_id=target_ph_id,
                    message_id=message_id,
                    text=new_text,
                    reply_markup=None
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

        connection.commit()

        await state.set_state(CompleteOrderStates.result_photos)
        await state.update_data(
            order_id=order_id,
            expert_id=expert_id,
            ph_id=ph_id,
            photos=[]
        )

        await bot.send_message(
            chat_id=callback.from_user.id,
            text="üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ –¢–†–Å–• —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ")]],
                resize_keyboard=True
            )
        )

        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞!")
    finally:
        cursor2.close()
        cursor.close()
        connection.close()


@ph_router.message(CompleteOrderStates.result_photos, F.photo)
async def process_result_photos(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    ph_id = await get_ph_id(message.from_user.id)  # type: ignore
    if ph_id != user_data.get('ph_id'):
        await message.answer("‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∑–∞—è–≤–∫–∏")
        return

    photos = user_data.get('photos', [])

    if len(photos) >= 3:
        await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ'")
        return

    photos.append(message.photo[-1].file_id)  # type: ignore
    await state.update_data(photos=photos)

    if len(photos) < 3:
        await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photos)}/3 –ø—Ä–∏–Ω—è—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    else:
        await message.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏.")


@ph_router.message(CompleteOrderStates.result_photos, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ")
async def finish_photos_upload(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    photos = user_data.get('photos', [])

    if not photos:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return

    order_id = user_data['order_id']
    expert_id = user_data['expert_id']
    ph_id = user_data['ph_id']
    photo_count = len(photos)

    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()

        cursor.execute(
            "UPDATE orders SET status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ', result_photo = %s WHERE id = %s",
            (photo_count, order_id)
        )

        cursor.execute(
            "SELECT up.tg_id, om.message_id FROM users_ph up LEFT JOIN order_messages om ON om.ph_id = up.id WHERE om.order_id = %s",
            (order_id))
        all_messages = cursor.fetchall()
        cursor.execute("SELECT description FROM orders WHERE id = %s", (order_id,))
        description = cursor.fetchone()[0]  # type: ignore

        for target_ph_id, message_id in all_messages:
            try:
                new_text = f"üìÑ –ó–∞—è–≤–∫–∞ #{order_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: –í—ã–ø–æ–ª–Ω–µ–Ω–∞"
                await bot.edit_message_text(
                    chat_id=target_ph_id,
                    message_id=message_id,
                    text=new_text,
                    reply_markup=None
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

        cursor.execute("SELECT tg_id FROM users_expert WHERE id = %s", (expert_id,))
        expert_tg_id = cursor.fetchone()[0]  # type: ignore

        media = [types.InputMediaPhoto(media=photo) for photo in photos]

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É?", callback_data='yes')
        )

        if media:
            media[0].caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{order_id}"
            await bot.send_media_group(
                chat_id=expert_tg_id,
                media=media
            )
            await bot.send_message(
                chat_id=expert_tg_id,
                text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É? #{order_id}",
                reply_markup=builder.as_markup()
            )
            await bot.send_media_group(chat_id=ADMIN_ID_1, media=media)
            await bot.send_media_group(chat_id=ADMIN_ID_2, media=media)

        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É!", reply_markup=ReplyKeyboardRemove())
        connection.commit()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        cursor.close()
        connection.close()
        await state.clear()


async def send_order_to_ph(order_id, description, photos):
    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore
        cursor = connection.cursor()

        cursor.execute("SELECT id, tg_id FROM users_ph")
        performers = cursor.fetchall()

        for ph_id, tg_id in performers:
            try:
                message_text = f"üìÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{order_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"
                markup = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order_id}"),
                    InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"retake_order_{order_id}")
                ]])

                msg = await bot.send_message(tg_id, message_text, reply_markup=markup)

                for photo_id in photos:
                    await bot.send_photo(tg_id, photo=photo_id)

                cursor.execute(
                    "INSERT INTO order_messages (order_id, ph_id, message_id) VALUES (%s, %s, %s)",
                    (order_id, ph_id, msg.message_id)
                )
                connection.commit()

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {ph_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
    finally:
        cursor.close()
        connection.close()


@dp.message(Command("rep"))
async def generate_report(message: types.Message):
    if message.from_user.id != ADMIN_ID_1 and message.from_user.id != ADMIN_ID_2:  # type: ignore
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    file_name = None
    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore

        experts_query = """
                        SELECT ue.id, \
                               ue.name, \
                               ue.surname, \
                               ue.adress_oto, \
                               DATE_FORMAT(o.created_at, '%Y-%m') as month,
                COUNT(o.id) as total_orders,
                ph.order_price * SUM(o.result_photo) as total_amount,
                ue.tg_id as TelegramId
                        FROM orders o
                            JOIN users_expert ue \
                        ON o.expert_id = ue.id
                            JOIN users_ph ph ON o.ph_id = ph.id
                        WHERE o.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                        GROUP BY ue.id, month
                        ORDER BY ue.id, month \
                        """
        experts_df = pd.read_sql(experts_query, connection)  # type: ignore

        ph_query = """
                   SELECT ph.id, \
                          ph.name, \
                          DATE_FORMAT(o.created_at, '%Y-%m') as month,
                COUNT(o.id) as total_orders,
                ph.order_price * SUM(o.result_photo) as total_amount
                   FROM orders o
                       JOIN users_ph ph \
                   ON o.ph_id = ph.id
                   WHERE o.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                   GROUP BY ph.id, month
                   ORDER BY ph.id, month \
                   """
        ph_df = pd.read_sql(ph_query, connection)  # type: ignore

        experts_query2 = """
                         SELECT ue.id, \
                                ue.name, \
                                ue.surname, \
                                ue.adress_oto, \
                                DATE_FORMAT(o.created_at, '%Y-%m-%d') as DAY,
                COUNT(o.id) as total_orders,
                ph.order_price * SUM(o.result_photo) as total_amount,
                ue.tg_id as TelegramId
                         FROM orders o
                             JOIN users_expert ue \
                         ON o.expert_id = ue.id
                             JOIN users_ph ph ON o.ph_id = ph.id
                         WHERE o.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                         GROUP BY ue.id, DAY
                         ORDER BY ue.id, DAY \
                         """
        experts_df2 = pd.read_sql(experts_query2, connection)  # type: ignore

        ph_query2 = """
                    SELECT ph.id, \
                           ph.name, \
                           DATE_FORMAT(o.created_at, '%Y-%m-%d') as DAY,
                COUNT(o.id) as total_orders,
                ph.order_price * SUM(o.result_photo) as total_amount
                    FROM orders o
                        JOIN users_ph ph \
                    ON o.ph_id = ph.id
                    WHERE o.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
                    GROUP BY ph.id, DAY
                    ORDER BY ph.id, DAY \
                    """
        ph_df2 = pd.read_sql(ph_query2, connection)  # type: ignore

        file_name = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        with pd.ExcelWriter(file_name) as writer:
            experts_df.to_excel(writer, sheet_name='–≠–∫—Å–ø–µ—Ä—Ç—ã_–ø–æ_–º–µ—Å', index=False)
            ph_df.to_excel(writer, sheet_name='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏_–ø–æ_–º–µ—Å', index=False)
            experts_df2.to_excel(writer, sheet_name='–≠–∫—Å–ø–µ—Ä—Ç—ã_–ø–æ_–¥–Ω—è–º', index=False)
            ph_df2.to_excel(writer, sheet_name='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏_–ø–æ_–¥–Ω—è–º', index=False)

        with open(file_name, "rb") as file:
            await bot.send_document(
                chat_id=message.chat.id,
                document=types.BufferedInputFile(file.read(), filename=file_name),
                caption="üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º"
            )

        await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    finally:
        if connection:
            connection.close()
        if file_name and os.path.exists(file_name):
            os.remove(file_name)


@dp.message(Command("repexp"))
async def generate_report2(message: types.Message):
    if message.from_user.id != ADMIN_ID_1 and message.from_user.id != ADMIN_ID_2:  # type: ignore
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    argument = message.text.split()[1:]  # type: ignore
    file_name = None
    try:
        connection = pymysql.connect(**DB_CONFIG)  # type: ignore

        experts_query = f"""
            SELECT 
                ue.id,
                ue.name,
                ue.surname,
                ue.adress_oto,
                DATE_FORMAT(o.created_at, '%Y-%m') as month,
                COUNT(o.id) as total_orders,
                SUM(ph.order_price) as total_amount,
                ue.tg_id as TelegramId
            FROM orders o
            JOIN users_expert ue ON o.expert_id = ue.id
            JOIN users_ph ph ON o.ph_id = ph.id
            WHERE o.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
            AND ue.tg_id = '{argument[0]}'
            GROUP BY ue.id, month
            ORDER BY ue.id, month
        """
        experts_df = pd.read_sql(experts_query, connection)  # type: ignore

        file_name = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        with pd.ExcelWriter(file_name) as writer:
            experts_df.to_excel(writer, sheet_name='–≠–∫—Å–ø–µ—Ä—Ç', index=False)

        with open(file_name, "rb") as file:
            await bot.send_document(
                chat_id=message.chat.id,
                document=types.BufferedInputFile(file.read(), filename=file_name),
                caption="üìä –û—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º"
            )

        await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    finally:
        if connection:
            connection.close()
        if file_name and os.path.exists(file_name):
            os.remove(file_name)


@dp.callback_query(lambda c: c.data == "yes")
async def request_revision(callback: types.CallbackQuery, state: FSMContext):
    text = callback.message.text
    order_id = int(text.split("#")[-1].split()[0]) if '#' in text else None
    print(order_id, text)
    if not order_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏")
        return

    await state.set_state(RevisionStates.revision_comment)
    await state.update_data(order_id=order_id)

    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")


@dp.message(RevisionStates.revision_comment)
async def process_revision_comment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    order_id = user_data['order_id']
    comment = message.text
    logging.info(f"Expert submitted revision comment for order #{order_id}: {comment}")

    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()

        cursor.execute(
            "UPDATE orders SET status = '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ', revision_comment = %s WHERE id = %s",
            (comment, order_id)
        )

        cursor.execute(
            "SELECT ph_id FROM orders WHERE id = %s",
            (order_id,)
        )
        ph_id = cursor.fetchone()[0]
        logging.info(f"Found PH ID for order #{order_id}: {ph_id}")

        cursor.execute(
            "SELECT tg_id FROM users_ph WHERE id = %s",
            (ph_id,)
        )
        ph_tg_id = cursor.fetchone()[0]
        logging.info(f"Found PH Telegram ID: {ph_tg_id}")

        connection.commit()

        cursor.execute(
            "INSERT INTO revision_states (order_id, ph_id, state) VALUES (%s, %s, %s) "
            "ON DUPLICATE KEY UPDATE state = VALUES(state)",
            (order_id, ph_id, "RevisionStates:revision_photos")
        )
        connection.commit()

        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∏",
            callback_data=f"activate_revision_{order_id}"
        ))

        await bot.send_message(
            ph_tg_id,
            f"üìù –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∑–∞—è–≤–∫–µ #{order_id}:\n\n{comment}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:",
            reply_markup=builder.as_markup()
        )

        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é!")
        logging.info(f"Revision comment sent to PH {ph_tg_id} for order #{order_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
    finally:
        cursor.close()
        connection.close()
        await state.clear()


@dp.message(RevisionStates.revision_photos, F.photo)
async def process_revision_photos(message: types.Message, state: FSMContext):
    logging.info(f"Received photo from PH {message.from_user.id} in revision_photos state")

    user_data = await state.get_data()
    photos = user_data.get('photos', [])
    logging.info(f"Current photos in state: {len(photos)}")

    if len(photos) >= 3:
        await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ! –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ'")
        return

    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    logging.info(f"Photo added. Total photos: {len(photos)}")

    if len(photos) < 3:
        await message.answer(f"‚úÖ –§–æ—Ç–æ {len(photos)}/3 –ø—Ä–∏–Ω—è—Ç–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
    else:
        await message.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ 3 —Ñ–æ—Ç–æ. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


@dp.message(RevisionStates.revision_photos, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ")
async def finish_revision_photos(message: types.Message, state: FSMContext):
    logging.info(f"PH {message.from_user.id} finished photo upload for revision")

    user_data = await state.get_data()
    photos = user_data.get('photos', [])
    order_id = user_data['order_id']
    logging.info(f"Processing revision photos for order #{order_id}. Photo count: {len(photos)}")

    if not photos:
        await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ!")
        return

    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        cursor.execute(
            "UPDATE orders SET status = '–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏' WHERE id = %s",
            (order_id,)
        )

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        cursor.execute(
            "DELETE FROM revision_states WHERE order_id = %s",
            (order_id,)
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç–∞
        cursor.execute(
            "SELECT expert_id FROM orders WHERE id = %s",
            (order_id,)
        )
        expert_id = cursor.fetchone()[0]
        logging.info(f"Found expert ID: {expert_id}")

        cursor.execute(
            "SELECT tg_id FROM users_expert WHERE id = %s",
            (expert_id,)
        )
        expert_tg_id = cursor.fetchone()[0]
        logging.info(f"Found expert Telegram ID: {expert_tg_id}")

        connection.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —ç–∫—Å–ø–µ—Ä—Ç—É
        media = [types.InputMediaPhoto(media=photo) for photo in photos]
        if media:
            media[0].caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ #{order_id}"
            await bot.send_media_group(chat_id=expert_tg_id, media=media)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–∞
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{order_id}'),
                InlineKeyboardButton(text="üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f'revision_{order_id}')
            )

            await bot.send_message(
                chat_id=expert_tg_id,
                text=f"–ó–∞—è–≤–∫–∞ #{order_id} –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ:",
                reply_markup=builder.as_markup()
            )
            logging.info(f"Revision results sent to expert {expert_tg_id}")

        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç—É!", reply_markup=ReplyKeyboardRemove())

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
    finally:
        cursor.close()
        connection.close()
        await state.clear()
        logging.info(f"State cleared for PH {message.from_user.id}")


@dp.callback_query(lambda c: c.data.startswith("accept_"))
async def accept_revision(callback: types.CallbackQuery):
    order_id = int(callback.data.split('_')[1])

    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute(
            "UPDATE orders SET status = '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' WHERE id = %s",
            (order_id,)
        )
        connection.commit()

        cursor.execute(
            "SELECT ph.tg_id FROM orders o LEFT JOIN users_ph ph ON ph.id = o.ph_id WHERE o.id = %s",
            (order_id,)
        )
        ph_tg_id = cursor.fetchone()[0]
        await bot.send_message(chat_id=ph_tg_id, text=f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç –ø—Ä–∏–Ω—è–ª –¥–æ—Ä–∞–±–æ—Ç–∫—É –ø–æ –∑–∞—è–≤–∫–µ #{order_id}!")
        await callback.message.edit_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{order_id} –ø—Ä–∏–Ω—è—Ç–∞!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞!")
    finally:
        cursor.close()
        connection.close()


@dp.callback_query(lambda c: c.data.startswith("revision_"))
async def request_new_revision(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[1])
    await state.set_state(RevisionStates.revision_comment)
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")


async def send_result_to_expert(expert_tg_id, photos, order_id):
    media = [types.InputMediaPhoto(media=photo) for photo in photos]
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{order_id}'),
        InlineKeyboardButton(text="üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data=f'revision_{order_id}')
    )

    if media:
        media[0].caption = f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{order_id}"
        await bot.send_media_group(chat_id=expert_tg_id, media=media)
        await bot.send_message(
            chat_id=expert_tg_id,
            text=f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ –∑–∞—è–≤–∫–µ #{order_id}:",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(lambda c: c.data.startswith("activate_revision_"))
async def activate_revision_state(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split('_')[-1])
    logging.info(f"Activating revision state for order #{order_id}")

    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute(
            "SELECT state FROM revision_states WHERE order_id = %s",
            (order_id,)
        )
        state_data = cursor.fetchone()

        if state_data and state_data[0] == "RevisionStates:revision_photos":
            await state.set_state(RevisionStates.revision_photos)
            await state.update_data(order_id=order_id, photos=[])

            await callback.message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ —Ç—Ä—ë—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ")]],
                    resize_keyboard=True
                )
            )
            await callback.answer()
        else:
            await callback.answer("‚ùå –°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    finally:
        connection.close()


@ph_router.callback_query(lambda c: c.data.startswith("retake_order_"))
async def decline_order_start(callback: types.CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[-1])

    connection = pymysql.connect(**DB_CONFIG)
    try:
        cursor = connection.cursor()
        cursor.execute("SELECT status FROM orders WHERE id = %s", (order_id,))
        status = cursor.fetchone()[0]

        if status != "–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è":
            await callback.answer("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
            return
    finally:
        cursor.close()
        connection.close()

    await state.set_state(DeclineOrderStates.reason)
    await state.update_data(order_id=order_id)

    await callback.message.answer(
        "üìù –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()


@ph_router.message(DeclineOrderStates.reason)
async def process_decline_reason(message: types.Message, state: FSMContext):
    reason = message.text
    user_data = await state.get_data()
    order_id = user_data['order_id']
    ph_id = await get_ph_id(message.from_user.id)

    if not ph_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
        await state.clear()
        return

    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()

        cursor.execute(
            "UPDATE orders SET status = '–û—Ç–º–µ–Ω–µ–Ω–æ', decline_reason = %s WHERE id = %s",
            (reason, order_id)
        )
        cursor.execute(
            "SELECT expert_id FROM orders WHERE id = %s",
            (order_id,)
        )
        expert_id = cursor.fetchone()[0]

        cursor.execute(
            "SELECT tg_id FROM users_expert WHERE id = %s",
            (expert_id,)
        )
        expert_tg_id = cursor.fetchone()[0]

        connection.commit()

        await bot.send_message(
            expert_tg_id,
            f"üö´ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )

        cursor.execute(
            "SELECT up.tg_id, om.message_id FROM users_ph up LEFT JOIN order_messages om ON om.ph_id = up.id WHERE om.order_id = %s",
            (order_id))
        all_messages = cursor.fetchall()
        cursor.execute("SELECT description FROM orders WHERE id = %s", (order_id,))
        description = cursor.fetchone()[0]  # type: ignore

        for target_ph_id, message_id in all_messages:
            try:
                new_text = f"üìÑ –ó–∞—è–≤–∫–∞ #{order_id}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"
                await bot.edit_message_text(
                    chat_id=target_ph_id,
                    message_id=message_id,
                    text=new_text,
                    reply_markup=None
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –æ—Ç –∑–∞—è–≤–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–∞–∑–∞")
    finally:
        cursor.close()
        connection.close()
        await state.clear()


async def check_pending_orders():
    while True:
        await asyncio.sleep(60)
        try:
            connection = pymysql.connect(**DB_CONFIG)
            cursor = connection.cursor()

            threshold = datetime.now() - timedelta(minutes=7)
            cursor.execute(
                "SELECT id, description FROM orders WHERE status = '–û–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è' AND created_at < %s",
                (threshold,)
            )
            old_orders = cursor.fetchall()

            for order_id, description in old_orders:
                if order_id not in sent_reminders:
                    await send_reminder_to_ph(order_id, description)
                    sent_reminders[order_id] = True

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫: {e}")
        finally:
            cursor.close()
            connection.close()


async def send_reminder_to_ph(order_id, description):
    try:
        connection = pymysql.connect(**DB_CONFIG)
        cursor = connection.cursor()

        cursor.execute("SELECT id, tg_id FROM users_ph")
        performers = cursor.fetchall()

        for ph_id, tg_id in performers:
            try:
                message_text = (
                    f"‚è∞ *–í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —É–∂–µ –±–æ–ª–µ–µ 7 –º–∏–Ω—É—Ç!*\n\n"
                    f"üìÑ –ó–∞—è–≤–∫–∞ #{order_id}\n"
                    f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–∑—å–º–∏—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É –∏–ª–∏ –æ—Ç–∫–∞–∂–∏—Ç–µ—Å—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã."
                )

                markup = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order_id}"),
                    InlineKeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"retake_order_{order_id}")
                ]])

                await bot.send_message(tg_id, message_text, reply_markup=markup)

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é {ph_id}: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    finally:
        cursor.close()
        connection.close()


async def main():
    asyncio.create_task(check_pending_orders())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())